{"version":3,"sources":["../../../src/server.ts"],"names":[],"mappings":";;AAAA,4BAA0B;AAC1B,6DAA0D;AAC1D,mCAAmC;AACnC,qCAAqC;AACrC,iCAAiC;AACjC,qCAAqC;AAErC,+BAA+B;AAC/B,wCAAmC;AACnC,4EAAqE;AACrE,wEAAiE;AACjE,4EAAqE;AACrE,oEAAiE;AACjE,0EAAuE;AACvE,0CAAwC;AACxC,6CAAsC;AAEtC,IAAI,cAAM,CAAC,SAAS,EAAE;IACpB,KAAK,CAAC,MAAM,CAAC,cAAM,CAAC,SAAS,EAAE;QAC7B,WAAW,EAAE,KAAK;QAClB,OAAO,EAAE,gBAAgB;KAC1B,CAAC,CAAC,OAAO,EAAE,CAAC;CACd;AAED;;;GAGG;AAEH,MAAa,MAAM;IAGjB,MAAM,CAAC,aAAa;QAClB,QAAQ,CAAC,GAAG,CAAC,+BAAqB,CAAC,CAAC;QACpC,QAAQ,CAAC,GAAG,CAAC,6BAAmB,CAAC,CAAC;IACpC,CAAC;IAED;QACE,sBAAsB;QAChB,QAAS,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAEzC,+BAA+B;QAE/B,IAAI,CAAC,GAAG,GAAG,yCAAmB,CAAC;YAC7B,WAAW,EAAE,MAAM;YACnB,WAAW,EAAE,CAAC,SAAS,GAAG,mBAAmB,CAAC;YAC9C,oBAAoB,EAAE,qCAAiB,CAAC,kBAAkB;YAC1D,kBAAkB,EAAE,2CAAoB,CAAC,gBAAgB;YACzD,IAAI,EAAE;gBACJ,QAAQ,EAAE,uBAAuB;gBACjC,QAAQ,EAAE,qCAAqC;gBAC/C,mBAAmB,EAAE,KAAK;gBAC1B,sBAAsB,EAAE,GAAG;aAC5B;SACF,CAAC,CAAC;QAEH,IAAI,cAAM,CAAC,SAAS,EAAE;YACpB,8DAA8D;YAC9D,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC,CAAC;YACrC,8DAA8D;YAC9D,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;SACpC;QAED,MAAM,CAAC,aAAa,EAAE,CAAC;QACvB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;QAEpC,qHAAqH;QACrH,gFAAgF;QAChF,IAAI,CAAC,GAAG,CAAC,GAAG,CACV,cAAc,EACd,+BAAqB,EACrB,OAAO,CAAC,MAAM,CAAC,cAAM,CAAC,YAAY,CAAC,CACpC,CAAC;IACJ,CAAC;IAED,KAAK;QACH,QAAQ,CAAC,OAAO,CAAC,cAAM,CAAC,QAAQ,EAAE,cAAM,CAAC,eAAe,CAAC,CAAC;QAE1D,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;QAEjC,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,cAAM,CAAC,IAAI,EAAE,GAAG,EAAE;YAC/C,OAAO,CAAC,MAAM,CAAC,KAAK,CAClB,sCAAsC,GAAG,cAAM,CAAC,IAAI,CACrD,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,MAAM,UAAU,GAAG,IAAI,oBAAU,CAAC,MAAM,CAAC,CAAC;QAC1C,UAAU,CAAC,IAAI,EAAE,CAAC;IACpB,CAAC;CACF;AA5DD,wBA4DC;AAED;;GAEG;AACH,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,MAAM,EAAE;IACnC,IAAI,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC;CACtB","file":"server.js","sourcesContent":["import 'reflect-metadata';\r\nimport { createExpressServer } from 'routing-controllers';\r\nimport * as express from 'express';\r\nimport * as mongoose from 'mongoose';\r\nimport * as morgan from 'morgan';\r\nimport * as passport from 'passport';\r\nimport { Express } from 'express';\r\nimport * as Raven from 'raven';\r\nimport config from './config/main';\r\nimport passportLoginStrategy from './security/passportLoginStrategy';\r\nimport passportJwtStrategy from './security/passportJwtStrategy';\r\nimport passportJwtMiddleware from './security/passportJwtMiddleware';\r\nimport { RoleAuthorization } from './security/RoleAuthorization';\r\nimport { CurrentUserDecorator } from './security/CurrentUserDecorator';\r\nimport './utilities/FilterErrorHandler';\r\nimport ChatServer from './ChatServer';\r\n\r\nif (config.sentryDsn) {\r\n  Raven.config(config.sentryDsn, {\r\n    environment: 'api',\r\n    release: '$TRAVIS_COMMIT',\r\n  }).install();\r\n}\r\n\r\n/**\r\n * Root class of your node server.\r\n * Can be used for basic configurations, for instance starting up the server or registering middleware.\r\n */\r\n\r\nexport class Server {\r\n  public app: Express;\r\n\r\n  static setupPassport() {\r\n    passport.use(passportLoginStrategy);\r\n    passport.use(passportJwtStrategy);\r\n  }\r\n\r\n  constructor() {\r\n    // Do not use mpromise\r\n    (<any>mongoose).Promise = global.Promise;\r\n\r\n    // mongoose.set('debug', true);\r\n\r\n    this.app = createExpressServer({\r\n      routePrefix: '/api',\r\n      controllers: [__dirname + '/controllers/*.js'], // register all controller's routes\r\n      authorizationChecker: RoleAuthorization.checkAuthorization,\r\n      currentUserChecker: CurrentUserDecorator.checkCurrentUser,\r\n      cors: {\r\n        'origin': 'http://localhost:4200',\r\n        'method': 'GET, HEAD, PUT, PATCH, POST, DELETE',\r\n        'preflightContinue': false,\r\n        'optionsSuccessStatus': 204,\r\n      },\r\n    });\r\n\r\n    if (config.sentryDsn) {\r\n      // The request handler must be the first middleware on the app\r\n      this.app.use(Raven.requestHandler());\r\n      // The error handler must be before any other error middleware\r\n      this.app.use(Raven.errorHandler());\r\n    }\r\n\r\n    Server.setupPassport();\r\n    this.app.use(passport.initialize());\r\n\r\n    // Requires authentication via the passportJwtMiddleware to accesss the static config.uploadFolder (e.g. for images).\r\n    // That means this is not meant for truly public files accessible without login!\r\n    this.app.use(\r\n      '/api/uploads',\r\n      passportJwtMiddleware,\r\n      express.static(config.uploadFolder)\r\n    );\r\n  }\r\n\r\n  start() {\r\n    mongoose.connect(config.database, config.databaseOptions);\r\n\r\n    this.app.use(morgan('combined'));\r\n\r\n    const server = this.app.listen(config.port, () => {\r\n      process.stdout.write(\r\n        'Server successfully started at port ' + config.port\r\n      );\r\n    });\r\n\r\n    const chatServer = new ChatServer(server);\r\n    chatServer.init();\r\n  }\r\n}\r\n\r\n/**\r\n * For testing mocha will start express itself\r\n */\r\nif (process.env.NODE_ENV !== 'test') {\r\n  new Server().start();\r\n}\r\n"]}